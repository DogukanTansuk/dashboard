create table if not exists covid19_cases_who
(
    id                INT generated by default as identity,
    date_reported     DATE       not null,
    country_code      VARCHAR(2) not null,
    country           TEXT       not null,
    who_region        VARCHAR(5) not null,
    new_cases         INTEGER    not null default 0,
    cumulative_cases  INTEGER    not null default 0,
    new_deaths        INTEGER    not null default 0,
    cumulative_deaths INTEGER    not null default 0,
    primary key (id)
);

create index if not exists who_country_index on covid19_cases_who using hash (country);

-- create table if NOT EXISTS covid19_cases_who_import (LIKE covid19_cases_who);

create table if not exists covid19_cases_jh
(
    id                  INT generated by default as identity,
    fips                INTEGER,
    admin2              TEXT,
    province_state      TEXT,
    country_region      TEXT           not null,
    last_update         TIMESTAMP      not null,
    lat                 DECIMAL(10, 6) default 0.0,
    long_               DECIMAL(10, 6) default 0.0,
    confirmed           INTEGER        default 0,
    deaths              INTEGER        default 0,
    recovered           INTEGER        default 0,
    active              INTEGER        default 0,
    combined_key        TEXT           not null,
    primary key (id)
);

create index if not exists jh_combined_key_index on covid19_cases_jh using hash (combined_key);

-- create table if NOT EXISTS covid19_cases_who_import (LIKE covid19_cases_who);

-- public DateTime ValidUntil { get; set; }
--         public bool Expired { get; set; }
--         public Guid UserId { get; set; }
--         public User User { get; set; }

create table if not exists users
(
    id            int generated always as identity unique ,
    email         text not null unique,
    password_hash text not null
);

create index if not exists user_email_index on users using hash (email);

create table if not exists refresh_tokens
(
    id          INT generated by default as identity,
    token       TEXT      not null,
    valid_until TIMESTAMP not null default now(),
    expired     boolean            default false,
    user_id     INT,
    primary key (id),
    constraint fk_user foreign key (user_id) references users (id) on delete cascade
);

create index if not exists refresh_token_index on refresh_tokens using hash (token);